[{"/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/index.js":"1","/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/Cursor.js":"2","/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/Scene.js":"3","/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/shaders/vertex.js":"4","/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/shaders/fragment.js":"5"},{"size":157,"mtime":1609886432914,"results":"6","hashOfConfig":"7"},{"size":13721,"mtime":1610246354018,"results":"8","hashOfConfig":"7"},{"size":7181,"mtime":1609898735605,"results":"9","hashOfConfig":"7"},{"size":3487,"mtime":1609876415101,"results":"10","hashOfConfig":"7"},{"size":1697,"mtime":1609876415101,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"8m4bke",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/index.js",[],["25","26"],"/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/Cursor.js",["27","28","29"],"import React, { useRef, useEffect, useState } from \"react\";\nimport paper from \"paper\";\nimport \"./App.css\";\nimport SimplexNoise from \"simplex-noise\";\nimport Scene from \"./Scene\";\nimport gsap from \"gsap\";\nconst MenuLeft = ({ magnetIn, magnetOut, rotateMenu }) => {\n  return (\n    <>\n      <nav class=\"nav\">\n        <a\n          href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M8.156 1.835a.25.25 0 00-.312 0l-5.25 4.2a.25.25 0 00-.094.196v7.019c0 .138.112.25.25.25H5.5V8.25a.75.75 0 01.75-.75h3.5a.75.75 0 01.75.75v5.25h2.75a.25.25 0 00.25-.25V6.23a.25.25 0 00-.094-.195l-5.25-4.2zM6.906.664a1.75 1.75 0 012.187 0l5.25 4.2c.415.332.657.835.657 1.367v7.019A1.75 1.75 0 0113.25 15h-3.5a.75.75 0 01-.75-.75V9H7v5.25a.75.75 0 01-.75.75h-3.5A1.75 1.75 0 011 13.25V6.23c0-.531.242-1.034.657-1.366l5.25-4.2h-.001z\"\n            ></path>\n          </svg>\n        </a>\n      </nav>\n    </>\n  );\n};\n\nconst MenuRight = ({ magnetIn, magnetOut, rotateMenu }) => {\n  return (\n    <>\n      <nav class=\"nav\">\n        <a\n          href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M0 7.75A.75.75 0 01.75 7h14.5a.75.75 0 010 1.5H.75A.75.75 0 010 7.75z\"\n            ></path>\n          </svg>\n        </a>\n        <a\n          href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M3.22 9.78a.75.75 0 010-1.06l4.25-4.25a.75.75 0 011.06 0l4.25 4.25a.75.75 0 01-1.06 1.06L8 6.06 4.28 9.78a.75.75 0 01-1.06 0z\"\n            ></path>\n          </svg>\n        </a>\n        <a\n                    href=\"https://github.com/isengupt/cubic-noise/\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M12.78 6.22a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06 0L3.22 7.28a.75.75 0 011.06-1.06L8 9.94l3.72-3.72a.75.75 0 011.06 0z\"\n            ></path>\n          </svg>\n        </a>\n      </nav>\n    </>\n  );\n};\n\nexport default function Cursor() {\n  const mouse = useRef(null);\n  const canvas = useRef(null);\n\n  let lastX = 1000;\n  let lastY = 1000;\n  let clientX = 1000;\n  let clientY = 1000;\n  const [stuck, setStuck] = useState(false);\n  const [[stuckX, stuckY], setStuckCoords] = useState([-100, -100]);\n\n  const magnetIn = (e) => {\n    setStuck(true);\n    const navItem = e.currentTarget;\n    const navItemBox = navItem.getBoundingClientRect();\n    setStuckCoords([\n      Math.round(navItemBox.left + navItemBox.width / 2),\n      Math.round(navItemBox.top + navItemBox.height / 2),\n    ]);\n    //stuckX = Math.round(navItemBox.left + navItemBox.width / 2);\n    //stuckY = Math.round(navItemBox.top + navItemBox.height / 2);\n    //console.log(navItem)\n  };\n\n  const magnetOut = () => {\n    setStuck(false);\n  };\n\n  const handleMouseMove = (e) => {\n    clientX = e.clientX;\n    clientY = e.clientY;\n    mouse.current.style.left = `${clientX - 2.5}px`;\n    mouse.current.style.top = `${clientY - 2.5}px`;\n    // console.log(stuck);\n  };\n\n  const initCanvas = () => {\n    paper.setup(canvas.current);\n\n    const polygon = new paper.Path.RegularPolygon(new paper.Point(0, 0), 8, 15);\n    polygon.strokeColor = \"#E963FE\";\n    polygon.strokeWidth = 1;\n\n    const polygon1 = new paper.Path.RegularPolygon(\n      new paper.Point(0, 0),\n      8,\n      15\n    );\n    polygon1.strokeColor = \"#3DB1FB\";\n    polygon1.strokeWidth = 1;\n\n    // polygon.smooth();\n    const shapeBounds = {\n      width: 50,\n      height: 50,\n    };\n\n    const noiseScale = 150; // speed\n    const noiseRange = 4; // range of distortion\n    let isNoisy = false; // state\n\n    const noiseObjects = polygon.segments.map(() => new SimplexNoise());\n    const noise1Objects = polygon1.segments.map(() => new SimplexNoise());\n    let bigCoordinates = [];\n\n    let group = new paper.Group([polygon]);\n    let group1 = new paper.Group([polygon1]);\n    group.applyMatrix = false;\n    group1.applyMatrix = false;\n\n    const lerp = (a, b, n) => {\n      return (1 - n) * a + n * b;\n    };\n\n    const map = (value, in_min, in_max, out_min, out_max) => {\n      return (\n        ((value - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n      );\n    };\n\n    // if (clientX <= 70 && clientY <= 70) {\n    //   isStuck = true;\n    // } else {\n    //   isStuck = false;\n    // }\n\n    paper.view.onFrame = (event) => {\n      if (!stuck) {\n        // move circle around normally\n        lastX = lerp(lastX, clientX, 0.2);\n        lastY = lerp(lastY, clientY, 0.2);\n        group.position = new paper.Point(lastX, lastY);\n        group1.position = new paper.Point(lastX, lastY);\n      } else if (stuck) {\n        lastX = lerp(lastX, stuckX, 0.2);\n        lastY = lerp(lastY, stuckY, 0.2);\n        group.position = new paper.Point(lastX, lastY);\n        group1.position = new paper.Point(lastX, lastY);\n      }\n\n      if (stuck && polygon.bounds.width < shapeBounds.width) {\n        // scale up the shape\n        polygon.scale(1.08);\n        polygon1.scale(1.08);\n      } else if (!stuck && polygon.bounds.width > 30) {\n        // remove noise\n        if (isNoisy) {\n          polygon.segments.forEach((segment, i) => {\n            segment.point.set(bigCoordinates[i][0], bigCoordinates[i][1]);\n          });\n          polygon1.segments.forEach((segment, i) => {\n            segment.point.set(bigCoordinates[i][0], bigCoordinates[i][1]);\n          });\n\n          isNoisy = false;\n          bigCoordinates = [];\n        }\n        // scale down the shape\n        const scaleDown = 0.85;\n        polygon.scale(scaleDown);\n        polygon1.scale(scaleDown);\n      }\n      /*  else {\n        // console.log(lastX);\n        lastX = lerp(lastX, 30, 0.3);\n        lastY = lerp(lastY, 30, 0.3);\n        group.position = new paper.Point(lastX, lastY);\n      } */\n\n      if (stuck && polygon.bounds.width >= shapeBounds.width) {\n        isNoisy = true;\n        // first get coordinates of large circle\n        if (bigCoordinates.length === 0) {\n          polygon.segments.forEach((segment, i) => {\n            bigCoordinates[i] = [segment.point.x, segment.point.y];\n          });\n          polygon1.segments.forEach((segment, i) => {\n            bigCoordinates[i] = [segment.point.x, segment.point.y];\n          });\n        }\n\n        // loop over all points of the polygon\n        polygon.segments.forEach((segment, i) => {\n          // get new noise value\n          // we divide event.count by noiseScale to get a very smooth value\n          const noiseX = noiseObjects[i].noise2D(event.count / noiseScale, 0);\n          const noiseY = noiseObjects[i].noise2D(event.count / noiseScale, 1);\n\n          // map the noise value to our defined range\n          const distortionX = map(noiseX, -1, 1, -noiseRange, noiseRange);\n          const distortionY = map(noiseY, -1, 1, -noiseRange, noiseRange);\n\n          // apply distortion to coordinates\n          const newX = bigCoordinates[i][0] + distortionX;\n          const newY = bigCoordinates[i][1] + distortionY;\n\n          // set new (noisy) coodrindate of point\n          segment.point.set(newX, newY);\n        });\n\n        polygon1.segments.forEach((segment, i) => {\n          // get new noise value\n          // we divide event.count by noiseScale to get a very smooth value\n          const noiseX = noise1Objects[i].noise2D(event.count / noiseScale, 0);\n          const noiseY = noise1Objects[i].noise2D(event.count / noiseScale, 1);\n\n          // map the noise value to our defined range\n          const distortionX = map(noiseX, -1, 1, -noiseRange, noiseRange);\n          const distortionY = map(noiseY, -1, 1, -noiseRange, noiseRange);\n\n          // apply distortion to coordinates\n          const newX = bigCoordinates[i][0] + distortionX;\n          const newY = bigCoordinates[i][1] + distortionY;\n\n          // set new (noisy) coodrindate of point\n          segment.point.set(newX, newY);\n        });\n      }\n      polygon.smooth();\n      polygon1.smooth();\n    };\n  };\n\n  useEffect(() => {\n    mouse.current.style.left = \"-100px\";\n    mouse.current.style.top = \"-100px\";\n\n    canvas.current.width = window.innerWidth;\n    canvas.current.height = window.innerHeight;\n\n    initCanvas();\n  });\n\n  const [rotate, setRotate] = useState(false);\n  const angle = React.useRef({\n    value: 100,\n    spinning: !rotate,\n    spin: 1,\n  });\n\n  function rotateMenu() {\n    console.log(\"hello\");\n    setRotate((currentRotate) => !currentRotate);\n    if (!rotate) {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: 30,\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 0,\n        ease: \"power2.inOut\",\n      });\n    } else {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: 100,\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 1,\n        ease: \"power2.inOut\",\n      });\n    }\n    angle.current.spinning = rotate;\n  }\n\n  function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  function translateMenu() {\n    setRotate((currentRotate) => !currentRotate);\n    if (!rotate) {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: randomIntFromInterval(-10, 20),\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 0,\n        ease: \"power2.inOut\",\n      });\n    } else {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: 100,\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 1,\n        ease: \"power2.inOut\",\n      });\n    }\n\n    /*  gsap.to(angle.current, {\n        duration: 1,\n        spin: 0,\n        ease: \"power2.inOut\",\n        delay: 1\n      });  */\n  }\n\n  return (\n    <main className=\"page-header\">\n      <Scene angle={angle} />\n      <div onMouseMove={handleMouseMove} className=\"container\">\n        <div ref={mouse} className=\"cursor cursor--small\" />\n        <canvas ref={canvas} className=\"cursor cursor--canvas\" />\n        <div className=\"section\">\n          <div className=\"sidebar left\">\n            <MenuLeft\n              rotateMenu={rotateMenu}\n              magnetIn={magnetIn}\n              magnetOut={magnetOut}\n            />\n\n            <a\n               href=\"https://github.com/isengupt/cubic-noise/\"\n              className=\"link full__link\"\n              onMouseEnter={magnetIn}\n              onMouseLeave={magnetOut}\n              onClick={translateMenu}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 16 16\"\n                width=\"16\"\n                height=\"16\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  d=\"M7.75 2a.75.75 0 01.75.75V7h4.25a.75.75 0 110 1.5H8.5v4.25a.75.75 0 11-1.5 0V8.5H2.75a.75.75 0 010-1.5H7V2.75A.75.75 0 017.75 2z\"\n                ></path>\n              </svg>\n            </a>\n          </div>\n          <div className=\"content\">\n            <div className=\"text__contain\">\n              <div>\n                Welcome\n                <span className=\"hero__span\">to</span>\n              </div>\n\n              <div>\n                Digital\n                <span className=\"large__hero\">Dream</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"sidebar right\">\n            <MenuRight\n              rotateMenu={rotateMenu}\n              magnetIn={magnetIn}\n              magnetOut={magnetOut}\n            />\n\n            <a\n                  href=\"https://isengupt.github.io/fiber-website/\"\n              className=\"link full__link\"\n              onMouseEnter={magnetIn}\n              onMouseLeave={magnetOut}\n              onClick={translateMenu}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 16 16\"\n                width=\"16\"\n                height=\"16\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  d=\"M2.75 2.5a.25.25 0 00-.25.25v2.5a.75.75 0 01-1.5 0v-2.5C1 1.784 1.784 1 2.75 1h2.5a.75.75 0 010 1.5h-2.5zM10 1.75a.75.75 0 01.75-.75h2.5c.966 0 1.75.784 1.75 1.75v2.5a.75.75 0 01-1.5 0v-2.5a.25.25 0 00-.25-.25h-2.5a.75.75 0 01-.75-.75zM1.75 10a.75.75 0 01.75.75v2.5c0 .138.112.25.25.25h2.5a.75.75 0 010 1.5h-2.5A1.75 1.75 0 011 13.25v-2.5a.75.75 0 01.75-.75zm12.5 0a.75.75 0 01.75.75v2.5A1.75 1.75 0 0113.25 15h-2.5a.75.75 0 010-1.5h2.5a.25.25 0 00.25-.25v-2.5a.75.75 0 01.75-.75z\"\n                ></path>\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/Scene.js",["30","31"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertex } from \"./shaders/vertex\";\nimport { fragment } from \"./shaders/fragment\";\nimport gsap from \"gsap\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\n\nclass Font extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      paused: true,\n      isRunning: false,\n\n      data: {\n        distortion: 0.0,\n        bloomStrength: 0.5,\n      },\n    };\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n  \n    });\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0x000000, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      this.width / this.height,\n      0.01,\n      100\n    );\n    this.camera.lookAt(new THREE.Vector3());\n    this.camera.position.set(0, 0, 100);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addPost();\n    this.addObjects();\n    this.animate();\n\n    this.resize();\n  }\n\n  addPost() {\n    this.renderScene = new RenderPass(this.scene, this.camera);\n\n    this.bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      1.0,\n      0.4,\n      0.65\n    );\n\n    this.bloomPass.threshold = this.state.data.bloomThreshold;\n    this.bloomPass.strength = this.state.data.bloomStrength;\n    this.bloomPass.radius = this.state.data.bloomRadius;\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(this.renderScene);\n    this.composer.addPass(this.bloomPass);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    /*    let meshes = [];\n\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        let m = this.material.clone();\n        const mesh = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), m);\n        \n        mesh.position.x = i*1.1-5;\n        mesh.position.z = j*1.1-5;\n        meshes.push(mesh.scale)\n        this.scene.add(mesh);\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = 0.1\n      }\n    }\n\n    this.scene.add(new THREE.AmbientLight('#59314f'))\n\n    const light  = new THREE.PointLight('#45caf7',1,15.5)\n    light.position.set(2,2,-4).multiplyScalar(1.5)\n    this.scene.add(light);\n\n    let t1 = gsap.timeline({repeat: -1,\n    repeatDelay: 0\n    })\n\n    t1.to(meshes, {\n      duration: 1,\n      x: 1,\n      y: 1,\n      z: 1,\n      yoyo: true,\n      stagger: {\n        grid: [10,10],\n        from: 'center',\n        amount: 1.5\n      }\n    }) */\n\n    let count = 2 * 15;\n\n    let geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n\n    this.mesh = new THREE.InstancedMesh(geometry, this.material, count ** 3);\n\n    let random = new Float32Array(count ** 3);\n    let depth = new Float32Array(count ** 3);\n    let pos = new Float32Array(3 * count ** 3);\n\n    let transform = new THREE.Object3D();\n\n    let jj = 0;\n    let ii = 0;\n    for (let i = 0; i < count; i++) {\n      for (let j = 0; j < count; j++) {\n        for (let k = 0; k < count; k++) {\n          transform.position.set(i - count / 2, j - count / 2, k - count / 2);\n          transform.updateMatrix();\n          random[ii] = Math.random();\n          depth[ii] = j / count;\n          pos[jj] = i / count;\n          jj++;\n          pos[jj] = j / count;\n          jj++;\n          pos[jj] = k / count;\n          jj++;\n\n          this.mesh.setMatrixAt(ii++, transform.matrix);\n        }\n      }\n    }\n\n    geometry.setAttribute(\n      \"random\",\n      new THREE.InstancedBufferAttribute(random, 1)\n    );\n\n    geometry.setAttribute(\n      \"depth\",\n      new THREE.InstancedBufferAttribute(depth, 1)\n    );\n\n    geometry.setAttribute(\"pos\", new THREE.InstancedBufferAttribute(pos, 3));\n\n    this.scene.add(this.mesh);\n\n\nconst color = \"#45caf7\";\nconst density = 0.01;\nthis.scene.fog = new THREE.FogExp2(color, density);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    \n    this.material.uniforms.time.value = this.time;\n    this.mesh.rotation.x = this.time * this.props.angle.current.spin / 8\n    this.mesh.rotation.y = this.time * this.props.angle.current.spin /8\n    this.camera.position.z = this.props.angle.current.value\n    this.frameId = requestAnimationFrame(this.animate);\n\n    //this.renderScene();\n    this.composer.render();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Font;\n","/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/shaders/vertex.js",[],"/Users/ishansengupta/Desktop/front-end/cubic-move-react/src/shaders/fragment.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":11,"column":9,"nodeType":"38","endLine":17,"endColumn":10},{"ruleId":"36","severity":1,"message":"37","line":39,"column":9,"nodeType":"38","endLine":45,"endColumn":10},{"ruleId":"36","severity":1,"message":"37","line":58,"column":9,"nodeType":"38","endLine":64,"endColumn":10},{"ruleId":"39","severity":1,"message":"40","line":6,"column":8,"nodeType":"41","messageId":"42","endLine":6,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":86,"column":9,"nodeType":"41","messageId":"42","endLine":86,"endColumn":13},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'gsap' is defined but never used.","Identifier","unusedVar","'that' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]