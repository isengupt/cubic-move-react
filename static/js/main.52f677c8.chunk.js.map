{"version":3,"sources":["Scene.js","shaders/vertex.js","shaders/fragment.js","Cursor.js","index.js"],"names":["Font","props","setupResize","window","addEventListener","resize","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","updateProjectionMatrix","state","time","paused","isRunning","data","distortion","bloomStrength","start","bind","stop","animate","this","scene","THREE","mount","clientWidth","clientHeight","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","appendChild","domElement","lookAt","position","set","controls","OrbitControls","addPost","addObjects","renderScene","RenderPass","bloomPass","UnrealBloomPass","innerWidth","innerHeight","threshold","bloomThreshold","strength","radius","bloomRadius","composer","EffectComposer","addPass","material","extensions","derivatives","side","uniforms","type","value","resolution","uvRate1","vertexShader","fragmentShader","count","geometry","mesh","random","Float32Array","depth","pos","transform","jj","ii","i","j","k","updateMatrix","Math","setMatrixAt","matrix","setAttribute","add","fog","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","rotation","x","angle","current","spin","y","z","render","id","ref","Component","MenuLeft","magnetIn","magnetOut","rotateMenu","class","href","className","onMouseEnter","onMouseLeave","onClick","xmlns","viewBox","fill-rule","d","MenuRight","Cursor","mouse","useRef","canvas","lastX","lastY","clientX","clientY","useState","stuck","setStuck","stuckX","stuckY","setStuckCoords","e","navItemBox","currentTarget","getBoundingClientRect","round","left","top","useEffect","style","paper","setup","polygon","Path","RegularPolygon","Point","strokeColor","strokeWidth","polygon1","shapeBounds","noiseScale","isNoisy","noiseObjects","segments","map","SimplexNoise","noise1Objects","bigCoordinates","group","Group","group1","applyMatrix","lerp","a","b","n","in_min","in_max","out_min","out_max","view","onFrame","event","bounds","scale","forEach","segment","point","length","noiseX","noise2D","noiseY","distortionX","distortionY","newX","newY","smooth","initCanvas","rotate","setRotate","React","spinning","currentRotate","gsap","to","duration","ease","translateMenu","min","max","floor","Scene","onMouseMove","ReactDOM"],"mappings":"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","file":"static/js/main.52f677c8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertex } from \"./shaders/vertex\";\nimport { fragment } from \"./shaders/fragment\";\nimport gsap from \"gsap\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\n\nclass Font extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      paused: true,\n      isRunning: false,\n\n      data: {\n        distortion: 0.0,\n        bloomStrength: 0.5,\n      },\n    };\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n  \n    });\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0x000000, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      this.width / this.height,\n      0.01,\n      100\n    );\n    this.camera.lookAt(new THREE.Vector3());\n    this.camera.position.set(0, 0, 100);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addPost();\n    this.addObjects();\n    this.animate();\n\n    this.resize();\n  }\n\n  addPost() {\n    this.renderScene = new RenderPass(this.scene, this.camera);\n\n    this.bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      1.0,\n      0.4,\n      0.65\n    );\n\n    this.bloomPass.threshold = this.state.data.bloomThreshold;\n    this.bloomPass.strength = this.state.data.bloomStrength;\n    this.bloomPass.radius = this.state.data.bloomRadius;\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(this.renderScene);\n    this.composer.addPass(this.bloomPass);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    /*    let meshes = [];\n\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        let m = this.material.clone();\n        const mesh = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), m);\n        \n        mesh.position.x = i*1.1-5;\n        mesh.position.z = j*1.1-5;\n        meshes.push(mesh.scale)\n        this.scene.add(mesh);\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = 0.1\n      }\n    }\n\n    this.scene.add(new THREE.AmbientLight('#59314f'))\n\n    const light  = new THREE.PointLight('#45caf7',1,15.5)\n    light.position.set(2,2,-4).multiplyScalar(1.5)\n    this.scene.add(light);\n\n    let t1 = gsap.timeline({repeat: -1,\n    repeatDelay: 0\n    })\n\n    t1.to(meshes, {\n      duration: 1,\n      x: 1,\n      y: 1,\n      z: 1,\n      yoyo: true,\n      stagger: {\n        grid: [10,10],\n        from: 'center',\n        amount: 1.5\n      }\n    }) */\n\n    let count = 2 * 15;\n\n    let geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n\n    this.mesh = new THREE.InstancedMesh(geometry, this.material, count ** 3);\n\n    let random = new Float32Array(count ** 3);\n    let depth = new Float32Array(count ** 3);\n    let pos = new Float32Array(3 * count ** 3);\n\n    let transform = new THREE.Object3D();\n\n    let jj = 0;\n    let ii = 0;\n    for (let i = 0; i < count; i++) {\n      for (let j = 0; j < count; j++) {\n        for (let k = 0; k < count; k++) {\n          transform.position.set(i - count / 2, j - count / 2, k - count / 2);\n          transform.updateMatrix();\n          random[ii] = Math.random();\n          depth[ii] = j / count;\n          pos[jj] = i / count;\n          jj++;\n          pos[jj] = j / count;\n          jj++;\n          pos[jj] = k / count;\n          jj++;\n\n          this.mesh.setMatrixAt(ii++, transform.matrix);\n        }\n      }\n    }\n\n    geometry.setAttribute(\n      \"random\",\n      new THREE.InstancedBufferAttribute(random, 1)\n    );\n\n    geometry.setAttribute(\n      \"depth\",\n      new THREE.InstancedBufferAttribute(depth, 1)\n    );\n\n    geometry.setAttribute(\"pos\", new THREE.InstancedBufferAttribute(pos, 3));\n\n    this.scene.add(this.mesh);\n\n\nconst color = \"#45caf7\";\nconst density = 0.01;\nthis.scene.fog = new THREE.FogExp2(color, density);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    \n    this.material.uniforms.time.value = this.time;\n    this.mesh.rotation.x = this.time * this.props.angle.current.spin / 8\n    this.mesh.rotation.y = this.time * this.props.angle.current.spin /8\n    this.camera.position.z = this.props.angle.current.value\n    this.frameId = requestAnimationFrame(this.animate);\n\n    //this.renderScene();\n    this.composer.render();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Font;\n","export var vertex = `\nattribute vec3 color;\nuniform float time;\nvarying vec2 vUv;\nattribute float random;\nattribute float depth;\nattribute vec3 pos;\nvarying float vDepth;\nvarying float vHidden;\n\n//\tSimplex 4D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n\nfloat snoise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n  void main() {\n    vUv = uv;\n    vDepth = depth;\n\n    float noise = snoise(vec4(pos*2.,time/10.));\n\n    noise = step(noise,0.1);\n    vHidden = noise;\n\n    //vec3 newpos = position*abs(sin(pos.x*3. + pos.y*3. + pos.z*3. + time));\n    vec3 newpos = position*noise;\n\n  gl_Position = projectionMatrix * modelViewMatrix*instanceMatrix * vec4(newpos,1.0);\n}\n`;\n","export var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform vec4 resolution;\nvarying float vDepth;\nvarying float vHidden;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\n\nfloat hue2rgb(float f1, float f2, float hue) {\n  if (hue < 0.0)\n      hue += 1.0;\n  else if (hue > 1.0)\n      hue -= 1.0;\n  float res;\n  if ((6.0 * hue) < 1.0)\n      res = f1 + (f2 - f1) * 6.0 * hue;\n  else if ((2.0 * hue) < 1.0)\n      res = f2;\n  else if ((3.0 * hue) < 2.0)\n      res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n  else\n      res = f1;\n  return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n  vec3 rgb;\n  \n  if (hsl.y == 0.0) {\n      rgb = vec3(hsl.z); // Luminance\n  } else {\n      float f2;\n      \n      if (hsl.z < 0.5)\n          f2 = hsl.z * (1.0 + hsl.y);\n      else\n          f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n          \n      float f1 = 2.0 * hsl.z - f2;\n      \n      rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n      rgb.g = hue2rgb(f1, f2, hsl.x);\n      rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n  }   \n  return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n  return hsl2rgb(vec3(h, s, l));\n}\nvoid main(){\n\nfloat width = 0.03;\n\nfloat prec = 0.001;\n\n\n  float borderx = max(\n    smoothstep(width+prec, width - prec, vUv.x),\n    smoothstep(width+prec, width - prec, 1. - vUv.x)\n    );\n\n    float bordery = max(\n      smoothstep(width+prec, width - prec, vUv.y),\n      smoothstep(width+prec, width - prec, 1.- vUv.y)\n      );\n\n    float border = max(borderx, bordery);\n\n    vec3 finalColor = mix( hsl2rgb(vDepth*0.5 + 0.5, 1.,vDepth), vec3(0.9), border);\n\n    if (vHidden < 0.5) discard;\n  gl_FragColor = vec4(finalColor,1.);\n  \n\n}\n`;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport paper from \"paper\";\nimport \"./App.css\";\nimport SimplexNoise from \"simplex-noise\";\nimport Scene from \"./Scene\";\nimport gsap from \"gsap\";\nconst MenuLeft = ({ magnetIn, magnetOut, rotateMenu }) => {\n  return (\n    <>\n      <nav class=\"nav\">\n        <a\n          href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M8.156 1.835a.25.25 0 00-.312 0l-5.25 4.2a.25.25 0 00-.094.196v7.019c0 .138.112.25.25.25H5.5V8.25a.75.75 0 01.75-.75h3.5a.75.75 0 01.75.75v5.25h2.75a.25.25 0 00.25-.25V6.23a.25.25 0 00-.094-.195l-5.25-4.2zM6.906.664a1.75 1.75 0 012.187 0l5.25 4.2c.415.332.657.835.657 1.367v7.019A1.75 1.75 0 0113.25 15h-3.5a.75.75 0 01-.75-.75V9H7v5.25a.75.75 0 01-.75.75h-3.5A1.75 1.75 0 011 13.25V6.23c0-.531.242-1.034.657-1.366l5.25-4.2h-.001z\"\n            ></path>\n          </svg>\n        </a>\n      </nav>\n    </>\n  );\n};\n\nconst MenuRight = ({ magnetIn, magnetOut, rotateMenu }) => {\n  return (\n    <>\n      <nav class=\"nav\">\n        <a\n          href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M0 7.75A.75.75 0 01.75 7h14.5a.75.75 0 010 1.5H.75A.75.75 0 010 7.75z\"\n            ></path>\n          </svg>\n        </a>\n        <a\n          href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M3.22 9.78a.75.75 0 010-1.06l4.25-4.25a.75.75 0 011.06 0l4.25 4.25a.75.75 0 01-1.06 1.06L8 6.06 4.28 9.78a.75.75 0 01-1.06 0z\"\n            ></path>\n          </svg>\n        </a>\n        <a\n                    href=\"#\"\n          className=\"link\"\n          onMouseEnter={magnetIn}\n          onMouseLeave={magnetOut}\n          onClick={rotateMenu}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 16 16\"\n            width=\"16\"\n            height=\"16\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M12.78 6.22a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06 0L3.22 7.28a.75.75 0 011.06-1.06L8 9.94l3.72-3.72a.75.75 0 011.06 0z\"\n            ></path>\n          </svg>\n        </a>\n      </nav>\n    </>\n  );\n};\n\nexport default function Cursor() {\n  const mouse = useRef(null);\n  const canvas = useRef(null);\n\n  let lastX = 1000;\n  let lastY = 1000;\n  let clientX = 1000;\n  let clientY = 1000;\n  const [stuck, setStuck] = useState(false);\n  const [[stuckX, stuckY], setStuckCoords] = useState([-100, -100]);\n\n  const magnetIn = (e) => {\n    setStuck(true);\n    const navItem = e.currentTarget;\n    const navItemBox = navItem.getBoundingClientRect();\n    setStuckCoords([\n      Math.round(navItemBox.left + navItemBox.width / 2),\n      Math.round(navItemBox.top + navItemBox.height / 2),\n    ]);\n    //stuckX = Math.round(navItemBox.left + navItemBox.width / 2);\n    //stuckY = Math.round(navItemBox.top + navItemBox.height / 2);\n    //console.log(navItem)\n  };\n\n  const magnetOut = () => {\n    setStuck(false);\n  };\n\n  const handleMouseMove = (e) => {\n    clientX = e.clientX;\n    clientY = e.clientY;\n    mouse.current.style.left = `${clientX - 2.5}px`;\n    mouse.current.style.top = `${clientY - 2.5}px`;\n    // console.log(stuck);\n  };\n\n  const initCanvas = () => {\n    paper.setup(canvas.current);\n\n    const polygon = new paper.Path.RegularPolygon(new paper.Point(0, 0), 8, 15);\n    polygon.strokeColor = \"#E963FE\";\n    polygon.strokeWidth = 1;\n\n    const polygon1 = new paper.Path.RegularPolygon(\n      new paper.Point(0, 0),\n      8,\n      15\n    );\n    polygon1.strokeColor = \"#3DB1FB\";\n    polygon1.strokeWidth = 1;\n\n    // polygon.smooth();\n    const shapeBounds = {\n      width: 50,\n      height: 50,\n    };\n\n    const noiseScale = 150; // speed\n    const noiseRange = 4; // range of distortion\n    let isNoisy = false; // state\n\n    const noiseObjects = polygon.segments.map(() => new SimplexNoise());\n    const noise1Objects = polygon1.segments.map(() => new SimplexNoise());\n    let bigCoordinates = [];\n\n    let group = new paper.Group([polygon]);\n    let group1 = new paper.Group([polygon1]);\n    group.applyMatrix = false;\n    group1.applyMatrix = false;\n\n    const lerp = (a, b, n) => {\n      return (1 - n) * a + n * b;\n    };\n\n    const map = (value, in_min, in_max, out_min, out_max) => {\n      return (\n        ((value - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n      );\n    };\n\n    // if (clientX <= 70 && clientY <= 70) {\n    //   isStuck = true;\n    // } else {\n    //   isStuck = false;\n    // }\n\n    paper.view.onFrame = (event) => {\n      if (!stuck) {\n        // move circle around normally\n        lastX = lerp(lastX, clientX, 0.2);\n        lastY = lerp(lastY, clientY, 0.2);\n        group.position = new paper.Point(lastX, lastY);\n        group1.position = new paper.Point(lastX, lastY);\n      } else if (stuck) {\n        lastX = lerp(lastX, stuckX, 0.2);\n        lastY = lerp(lastY, stuckY, 0.2);\n        group.position = new paper.Point(lastX, lastY);\n        group1.position = new paper.Point(lastX, lastY);\n      }\n\n      if (stuck && polygon.bounds.width < shapeBounds.width) {\n        // scale up the shape\n        polygon.scale(1.08);\n        polygon1.scale(1.08);\n      } else if (!stuck && polygon.bounds.width > 30) {\n        // remove noise\n        if (isNoisy) {\n          polygon.segments.forEach((segment, i) => {\n            segment.point.set(bigCoordinates[i][0], bigCoordinates[i][1]);\n          });\n          polygon1.segments.forEach((segment, i) => {\n            segment.point.set(bigCoordinates[i][0], bigCoordinates[i][1]);\n          });\n\n          isNoisy = false;\n          bigCoordinates = [];\n        }\n        // scale down the shape\n        const scaleDown = 0.85;\n        polygon.scale(scaleDown);\n        polygon1.scale(scaleDown);\n      }\n      /*  else {\n        // console.log(lastX);\n        lastX = lerp(lastX, 30, 0.3);\n        lastY = lerp(lastY, 30, 0.3);\n        group.position = new paper.Point(lastX, lastY);\n      } */\n\n      if (stuck && polygon.bounds.width >= shapeBounds.width) {\n        isNoisy = true;\n        // first get coordinates of large circle\n        if (bigCoordinates.length === 0) {\n          polygon.segments.forEach((segment, i) => {\n            bigCoordinates[i] = [segment.point.x, segment.point.y];\n          });\n          polygon1.segments.forEach((segment, i) => {\n            bigCoordinates[i] = [segment.point.x, segment.point.y];\n          });\n        }\n\n        // loop over all points of the polygon\n        polygon.segments.forEach((segment, i) => {\n          // get new noise value\n          // we divide event.count by noiseScale to get a very smooth value\n          const noiseX = noiseObjects[i].noise2D(event.count / noiseScale, 0);\n          const noiseY = noiseObjects[i].noise2D(event.count / noiseScale, 1);\n\n          // map the noise value to our defined range\n          const distortionX = map(noiseX, -1, 1, -noiseRange, noiseRange);\n          const distortionY = map(noiseY, -1, 1, -noiseRange, noiseRange);\n\n          // apply distortion to coordinates\n          const newX = bigCoordinates[i][0] + distortionX;\n          const newY = bigCoordinates[i][1] + distortionY;\n\n          // set new (noisy) coodrindate of point\n          segment.point.set(newX, newY);\n        });\n\n        polygon1.segments.forEach((segment, i) => {\n          // get new noise value\n          // we divide event.count by noiseScale to get a very smooth value\n          const noiseX = noise1Objects[i].noise2D(event.count / noiseScale, 0);\n          const noiseY = noise1Objects[i].noise2D(event.count / noiseScale, 1);\n\n          // map the noise value to our defined range\n          const distortionX = map(noiseX, -1, 1, -noiseRange, noiseRange);\n          const distortionY = map(noiseY, -1, 1, -noiseRange, noiseRange);\n\n          // apply distortion to coordinates\n          const newX = bigCoordinates[i][0] + distortionX;\n          const newY = bigCoordinates[i][1] + distortionY;\n\n          // set new (noisy) coodrindate of point\n          segment.point.set(newX, newY);\n        });\n      }\n      polygon.smooth();\n      polygon1.smooth();\n    };\n  };\n\n  useEffect(() => {\n    mouse.current.style.left = \"-100px\";\n    mouse.current.style.top = \"-100px\";\n\n    canvas.current.width = window.innerWidth;\n    canvas.current.height = window.innerHeight;\n\n    initCanvas();\n  });\n\n  const [rotate, setRotate] = useState(false);\n  const angle = React.useRef({\n    value: 100,\n    spinning: !rotate,\n    spin: 1,\n  });\n\n  function rotateMenu() {\n    console.log(\"hello\");\n    setRotate((currentRotate) => !currentRotate);\n    if (!rotate) {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: 30,\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 0,\n        ease: \"power2.inOut\",\n      });\n    } else {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: 100,\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 1,\n        ease: \"power2.inOut\",\n      });\n    }\n    angle.current.spinning = rotate;\n  }\n\n  function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  function translateMenu() {\n    setRotate((currentRotate) => !currentRotate);\n    if (!rotate) {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: randomIntFromInterval(-10, 20),\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 0,\n        ease: \"power2.inOut\",\n      });\n    } else {\n      gsap.to(angle.current, {\n        duration: 1,\n        value: 100,\n        ease: \"power2.inOut\",\n      });\n      gsap.to(angle.current, {\n        duration: 1,\n        spin: 1,\n        ease: \"power2.inOut\",\n      });\n    }\n\n    /*  gsap.to(angle.current, {\n        duration: 1,\n        spin: 0,\n        ease: \"power2.inOut\",\n        delay: 1\n      });  */\n  }\n\n  return (\n    <main className=\"page-header\">\n      <Scene angle={angle} />\n      <div onMouseMove={handleMouseMove} className=\"container\">\n        <div ref={mouse} className=\"cursor cursor--small\" />\n        <canvas ref={canvas} className=\"cursor cursor--canvas\" />\n        <div className=\"section\">\n          <div className=\"sidebar left\">\n            <MenuLeft\n              rotateMenu={rotateMenu}\n              magnetIn={magnetIn}\n              magnetOut={magnetOut}\n            />\n\n            <a\n               href=\"https://github.com/isengupt/cubic-move-react/\"\n              className=\"link full__link\"\n              onMouseEnter={magnetIn}\n              onMouseLeave={magnetOut}\n              onClick={translateMenu}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 16 16\"\n                width=\"16\"\n                height=\"16\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  d=\"M7.75 2a.75.75 0 01.75.75V7h4.25a.75.75 0 110 1.5H8.5v4.25a.75.75 0 11-1.5 0V8.5H2.75a.75.75 0 010-1.5H7V2.75A.75.75 0 017.75 2z\"\n                ></path>\n              </svg>\n            </a>\n          </div>\n          <div className=\"content\">\n            <div className=\"text__contain\">\n              <div>\n                Welcome\n                <span className=\"hero__span\">to</span>\n              </div>\n\n              <div>\n                Digital\n                <span className=\"large__hero\">Dream</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"sidebar right\">\n            <MenuRight\n              rotateMenu={rotateMenu}\n              magnetIn={magnetIn}\n              magnetOut={magnetOut}\n            />\n\n            <a\n                  href=\"https://isengupt.github.io/audio-visual/\"\n              className=\"link full__link\"\n              onMouseEnter={magnetIn}\n              onMouseLeave={magnetOut}\n              onClick={translateMenu}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 16 16\"\n                width=\"16\"\n                height=\"16\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  d=\"M2.75 2.5a.25.25 0 00-.25.25v2.5a.75.75 0 01-1.5 0v-2.5C1 1.784 1.784 1 2.75 1h2.5a.75.75 0 010 1.5h-2.5zM10 1.75a.75.75 0 01.75-.75h2.5c.966 0 1.75.784 1.75 1.75v2.5a.75.75 0 01-1.5 0v-2.5a.25.25 0 00-.25-.25h-2.5a.75.75 0 01-.75-.75zM1.75 10a.75.75 0 01.75.75v2.5c0 .138.112.25.25.25h2.5a.75.75 0 010 1.5h-2.5A1.75 1.75 0 011 13.25v-2.5a.75.75 0 01.75-.75zm12.5 0a.75.75 0 01.75.75v2.5A1.75 1.75 0 0113.25 15h-2.5a.75.75 0 010-1.5h2.5a.25.25 0 00.25-.25v-2.5a.75.75 0 01.75-.75z\"\n                ></path>\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Cursor from \"./Cursor\";\n\nReactDOM.render(<Cursor />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}